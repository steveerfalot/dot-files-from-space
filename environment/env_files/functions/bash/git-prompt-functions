#!/usr/bin/env bash

BOLD_COLOR="\[$(tput bold)\]"
COLOR_RED="\[$(tput setaf 1)\]"
COLOR_GREEN="\[$(tput setaf 2)\]"
COLOR_YELLOW="\[$(tput setaf 3)\]"
COLOR_BLUE="\[$(tput setaf 4)\]"
COLOR_MAGENTA="\[$(tput setaf 5)\]"
COLOR_CYAN="\[$(tput setaf 6)\]"
COLOR_WHITE="\[$(tput setaf 7)\]"
COLOR_RESET="\[$(tput sgr0)\]"

function git_color() {
  local git_stats="$(git status 2> /dev/null)"
  local out="$BOLD_COLOR"

  if [[ ${git_stats} =~ "Your branch is ahead of" ]]
  then
    out+="${COLOR_CYAN}Ahead"
  elif [[ ${git_stats} =~ "Changes not staged" ]]
  then
    out+="${COLOR_RED}Unstaged Changes"
  elif [[ ${git_stats} =~ "Changes to be committed" ]]
  then
    out+="${COLOR_GREEN}Staged Changes"
  elif [[ ${git_stats} =~ "nothing to commit" ]]
  then
    out+="${COLOR_GREEN}Clean"
  else
    out+="${COLOR_RED}Not a repo"
  fi

  out+="$COLOR_RESET"

  echo -e "$out"
}

function git_brancher() {
  local stats="$(git status 2> /dev/null)"
  local on_branch="On branch ([^${IFS}]*)"
  local on_commit="HEAD detached at ([^${IFS}]*)"

  if [[ ${stats} =~ $on_branch ]]; then
    local branch=${BASH_REMATCH[1]}
    echo "($branch)"
  elif [[ ${stats} =~ $on_commit ]]; then
    local commit=${BASH_REMATCH[1]}
    echo "($commit)"
  fi
}
